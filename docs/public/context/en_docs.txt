[Document: articles/welcome.json]
Title: Welcome to Akira Doc
Get started with Akira Docs - Next-gen documentation powered by AI
Welcome to Akira Doc
Welcome to Akira Docs, the next-generation documentation platform powered by AI. This template will help you get started with creating your own documentation.
Key Features
Easy to customize
AI-powered search
Block-based content system
Responsive design
Getting Started: Start by customizing this template to match your project's needs!
-------------
[Document: articles/template.json]
Title: Test Blog Post
A test blog post to demonstrate all block types.
Example Heading Sample1
This paragraph is part of the test blog post. It demonstrates the paragraph block.
Code example:
console.log('Testing all blocks');
Item 1
Item 2
Item 3
Important: This is an important callout message.
-------------
[Document: articles/ai_integration.json]
AI Assistant Integration
Learn how to use Akira's built-in AI assistant for documentation enhancement

Akira's AI Assistant is a powerful tool that helps developers and technical writers create, maintain, and improve documentation through natural language interactions. This guide covers the essential features and best practices for utilizing the AI assistant effectively.
Key Features
Natural language documentation generation
Code example suggestions
Content summarization
Grammar and style improvements
Multi-language support
Getting Started
The AI Assistant can be accessed through the command palette (Ctrl+Shift+P) or by using the `/ai` command in any content block. It understands context-aware requests and can help with various documentation tasks.
Common Use Cases
1. Generating code examples
2. Explaining technical concepts
3. Restructuring content
4. Creating documentation outlines
5. Translating documentation
Best Practices
Provide clear context when making requests
Review and validate AI-generated content
Use AI suggestions as a starting point
Combine AI assistance with human expertise
Keep documentation style consistent
Configuration Options
You can customize the AI Assistant's behavior through the `config.yaml` file:
Code example:
ai_assistant:
  model: "advanced-docs-v2"
  temperature: 0.7
  max_tokens: 2048
  style_guide: "path/to/style/guide.md"
Next Steps
Explore our [Advanced AI Features](/advanced-ai-features) guide to learn more about specialized use cases and integration possibilities.
-------------
[Document: docs/introduction.json]
Introduction to AkiraDocs
AkiraDocs is a next-generation documentation platform that combines the power of AI with an intuitive content management system. It's designed to transform your documentation workflow from months to minutes.
Why AkiraDocs?
Documentation is often a challenge for teams:
Developers want to keep using Markdown and Git
Content teams need user-friendly editors
Technical writers struggle with version management
Product managers deal with out-of-sync documentation
Enterprise leaders need better analytics
AkiraDocs solves these challenges by providing a unified platform that brings everyone's workflow together.
Core Benefits
**Universal Workflow**: Developers keep their Markdown/Git workflow while content teams get a block-based WYSIWYG editor
**AI-Powered**: Automatic content updates, translations, and optimizations
**SEO-Optimized**: Documentation that ranks well by default
**Multi-Language Support**: AI-powered translations with context awareness
**Enterprise-Ready**: SSO/SAML integration, audit logs, and custom deployment options
Who Is It For?
Developer Documentation
API documentation
SDK guides
Technical specifications
Implementation guides
Product Documentation
User guides
Feature documentation
Release notes
FAQs
Enterprise Documentation
Internal knowledge bases
Process documentation
Compliance documentation
Training materials
Next Steps
Ready to get started? Check out our [Quick Start Guide](./quick-start.md) or explore our [detailed features](./features.md).
-------------
[Document: docs/seo-and-performance/sitemap-generation.json]
Automatic Sitemap Generation
Learn how AkiraDocs automatically generates and manages your documentation sitemap.
Overview
AkiraDocs automatically generates a sitemap.xml file during the build process, ensuring search engines can efficiently crawl your documentation.
Default Configuration
Code example:
{
  "seo": {
    "sitemap": {
      "enabled": true,
      "autoGenerate": true,
      "changefreq": "weekly",
      "priority": 0.7
    }
  }
}
Generated Sitemap Structure
Example Output
Code example:
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>https://yourdocs.com/</loc>
    <lastmod>2024-11-26</lastmod>
    <changefreq>weekly</changefreq>
    <priority>1.0</priority>
  </url>
  <url>
    <loc>https://yourdocs.com/docs/getting-started</loc>
    <lastmod>2024-11-26</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.8</priority>
  </url>
</urlset>
Customization Options
Priority Settings
Code example:
{
  "seo": {
    "sitemap": {
      "priorities": {
        "home": 1.0,
        "docs": 0.8,
        "blog": 0.6,
        "other": 0.5
      }
    }
  }
}
Update Frequency
Code example:
{
  "seo": {
    "sitemap": {
      "changefreq": {
        "home": "daily",
        "docs": "weekly",
        "blog": "monthly"
      }
    }
  }
}
Best Practices
1. **Regular Updates**
Keep content fresh
Maintain accurate lastmod dates
Remove obsolete URLs
2. **Structure Optimization**
Logical URL hierarchy
Consistent naming
Clear categories
3. **Performance**
Compress large sitemaps
Use sitemap index for large sites
Monitor crawl stats
-------------
[Document: docs/seo-and-performance/robot-txt.json]
Robots.txt Configuration
Guide to customizing and managing your robots.txt file in AkiraDocs.
Default Configuration
Basic robots.txt
Code example:
User-agent: *
Allow: /
Sitemap: https://yourdocs.com/sitemap.xml

# Private sections
Disallow: /admin/
Disallow: /private/
Customization
Configuration Options
Code example:
{
  "seo": {
    "robots": {
      "enabled": true,
      "autoGenerate": true,
      "custom": {
        "disallow": ["/internal/", "/draft/"],
        "allow": ["/public/"],
        "crawlDelay": 10
      }
    }
  }
}
Advanced Rules
Code example:
# Custom crawl rate
User-agent: Googlebot
Crawl-delay: 10

# Allow specific bot
User-agent: Bingbot
Allow: /public/
Disallow: /private/

# Block specific bot
User-agent: BadBot
Disallow: /
Best Practices
1. **Access Control**
Block sensitive content
Allow public content
Manage crawl rates
2. **Performance**
Optimize crawl budget
Prevent unnecessary indexing
Monitor bot behavior
3. **Maintenance**
Regular updates
Verify syntax
Test configuration
-------------
[Document: docs/internationalization/managing-translation.json]
Managing Translations
Learn how to effectively manage and maintain translated content in AkiraDocs.
Translation Workflow
Automatic Translation
1. Create content in source language
2. Enable auto-translation in config
3. Build/deploy to generate translations
4. Review and refine translations
Manual Translation
1. Create language-specific directories
2. Copy source content
3. Translate manually
4. Update metadata
Content Organization
File Structure
Code example:
_contents/
├── en/
│   └── docs/
│       ├── intro.md
│       └── guide.md
├── es/
│   └── docs/
│       ├── intro.md
│       └── guide.md
└── fr/
    └── docs/
        ├── intro.md
        └── guide.md
Translation Status Tracking
Code example:
{
  "translationStatus": {
    "es": {
      "completion": "85%",
      "lastUpdated": "2024-11-26",
      "pendingFiles": ["advanced/config.md"]
    }
  }
}
Quality Control
Review Process
1. AI Translation
2. Human Review
3. Technical Verification
4. Publication
Version Control
Track changes across languages
Maintain synchronization
Handle updates efficiently
-------------
[Document: docs/internationalization/ai-translation.json]
AI-Powered Translation
Guide to using AkiraDocs' AI translation capabilities.
Setup
Configuration
Code example:
{
  "translation": {
    "auto_translate": true,
    "provider": "anthropic",
    "model": "claude-3-sonnet-20240229",
    "targetLanguages": ["es", "fr", "de"],
    "excludedPaths": ["_meta.json"]
  }
}
API Setup
Code example:
ANTHROPIC_API_KEY=your_api_key
Features
Automatic Translation
Content translation during build
Context-aware translations
Technical term preservation
Format maintenance
-------------
[Document: docs/installation/troubleshooting.json]
Troubleshooting Guide
Common issues and their solutions when setting up AkiraDocs.
Common Installation Issues
Node.js Version Mismatch
**Problem**: Error about Node.js version compatibility
Code example:
Error: The engine "node" is incompatible with this module
**Solution**:
1. Check your Node.js version:
Code example:
node --version
2. Install the correct version (16.x or higher)
3. Use nvm to manage Node.js versions:
Code example:
nvm install 20
nvm use 20
Dependencies Installation Failed
**Problem**: npm install fails with errors

**Solution**:
1. Clear npm cache:
Code example:
npm cache clean --force
2. Delete node_modules and package-lock.json:
Code example:
rm -rf node_modules package-lock.json
npm install
Build Issues
Build Fails
**Problem**: `npm run build` fails

**Solution**:
1. Check for TypeScript errors:
Code example:
npm run type-check
2. Verify environment variables are set correctly
3. Clear next.js cache:
Code example:
rm -rf .next
Static Export Issues
**Problem**: Static export fails with dynamic routes

**Solution**:
1. Configure `next.config.js`:
Code example:
module.exports = {
  output: 'export',
  images: {
    unoptimized: true
  }
}
Translation Issues
AI Translation Not Working
**Problem**: Automatic translation fails

**Solution**:
1. Verify API keys are set correctly
2. Check translation configuration:
Code example:
{
  "translation": {
    "auto_translate": true,
    "provider": "anthropic",
    "targetLanguages": ["es", "fr", "de"]
  }
}
Content Issues
Content Not Updating
**Problem**: Changes to content files not reflecting

**Solution**:
Content changes are built on build time. If you are using the local development server, you need to restart the server after making changes.
1. Clear the cache:
Code example:
npm run clean
2. Restart the development server
3. Check file permissions
Deployment Issues
Vercel Deployment Failed
**Problem**: Deployment to Vercel fails

**Solution**:
1. Check build logs
2. Verify environment variables are set in Vercel dashboard
3. Ensure all dependencies are listed in package.json
Getting Help
If you're still experiencing issues:

1. Check our [GitHub Issues](https://github.com/Cloud-Code-AI/Akiradocs/issues)
2. Join our [Discord Community](https://discord.gg/zvYZukgeH2)
3. Contact [Support](mailto:saurav.panda@akiradocs.ai)
-------------
[Document: docs/installation/setup.json]
Detailed Installation Guide
Complete guide to installing AkiraDocs in different environments.
Prerequisites
Ensure your system meets the [requirements](../getting-started/requirements.md) before proceeding.
Installation Methods
1. Local Development Setup
1. **Clone the Repository**
Code example:
git clone https://github.com/your-org/akira-docs-template
cd akira-docs-template
2. **Install Dependencies**
Code example:
npm install
3. **Create Environment File**
Code example:
cp .env.example .env.local
4. **Configure Environment Variables**
Code example:
NEXT_PUBLIC_API_URL=your_api_url
NEXT_PUBLIC_SITE_URL=your_site_url
2. Docker Installation
1. **Pull the Docker Image**
Code example:
docker pull akiradocs/akiradocs:latest
2. **Run the Container**
Code example:
docker run -p 3000:3000 akiradocs/akiradocs:latest
3. Cloud Platform Deployment
Vercel
1. Fork the repository
2. Connect to Vercel
3. Configure environment variables
4. Deploy
Other Platforms
AWS Amplify
Netlify
Digital Ocean
Custom server
Post-Installation Steps
1. **Verify Installation**
Code example:
npm run build
npm run start
2. **Configure Git Integration**
Code example:
git remote add origin your-repository-url
3. **Setup Content Directory**
Code example:
mkdir -p docs/_contents/en
Environment-Specific Configurations
Development
Code example:
NODE_ENV=development
DEBUG=true
Production
Code example:
NODE_ENV=production
DEBUG=false
Testing
Code example:
NODE_ENV=test
TEST_MODE=true
Next Steps
[Configuration Guide](./configuration.md)
[Troubleshooting](./troubleshooting.md)
-------------
[Document: docs/installation/configuration.json]
Configuration Guide
Complete guide to configuring your AkiraDocs installation.
Core Configuration
Site Configuration
Edit `akiradocs.config.json`:
Code example:
{
    "site": {
        "title": "Your Docs",
        "description": "Your documentation description"
    },
    "branding": {
        "logo": {
            "path": "/your_logo.svg",
            "width": 120,
            "height": 30,
            "show": true
        },
        "favicon": {
            "path": "/favicon.png",
            "show": true
        }
    }
}
Navigation Setup
Code example:
{
    "navigation": {
        "header": {
            "items": [
                { "label": "Docs", "href": "/docs", "icon": "/docs.svg" },
                { "label": "API", "href": "/api", "icon": "/api.svg" }
            ]
        }
    }
}
Internationalization
Language Configuration
Code example:
{
    "localization": {
        "defaultLocale": "en",
        "fallbackLocale": "en",
        "locales": [
            {
                "code": "en",
                "name": "English",
                "flag": "🇺🇸"
            },
            {
                "code": "es",
                "name": "Español",
                "flag": "🇪🇸"
            },
            {
                "code": "fr",
                "name": "Français",
                "flag": "🇫🇷"
            },
            {
                "code": "de",
                "name": "Deutsch",
                "flag": "🇩🇪"
            }
        ]
    },
     "translation": {
        "auto_translate": true,
        "provider": "anthropic",
        "model": "claude-3-sonnet-20240229",
        "targetLanguages": ["es", "fr", "de"],
        "excludedPaths": ["_meta.json"]
    },
}
-------------
[Document: docs/guides/analytics.json]
Title: Analytics Integration
Learn how to add analytics tracking to your documentation
Analytics Integration
AkiraDocs supports Google Analytics 4 (GA4) out of the box. This guide will help you set up analytics tracking for your documentation.
Setting up Google Analytics
1. Create a Google Analytics 4 property in your [Google Analytics account](https://analytics.google.com/)
2. Get your Measurement ID (starts with "G-")
3. Add the ID to your `akiradocs.config.json`:
Code example:
{
"analytics": {
"google": {
"measurementId": "G-XXXXXXXXXX",
"enabled": true
},
"debug": false
}
}
What's Tracked Automatically
Page views
Navigation between pages
Time on page
User language preferences
Device and browser information
Custom Event Tracking
You can track custom events using the `useAnalytics` hook:
Code example:
import { useAnalytics } from '@/hooks/useAnalytics'
function MyComponent() {
    const { track } = useAnalytics()
    const handleClick = () => {
        track('doc_rating', {
            rating: 5,
            page: 'getting-started',
            helpful: true
        })
    }
    return <button onClick={handleClick}>This was helpful</button>
}
Debug Mode
Enable debug mode to see analytics events in the console during development:
Code example:
{
"analytics": {
"debug": true
}
}
This provides a complete analytics integration that's easy for users to set up and extend as needed.
-------------
[Document: docs/getting-started/requirements.json]
System Requirements
Before installing AkiraDocs, ensure your environment meets the following requirements.
Minimum Requirements
Node.js
Version: 16.x or higher
Recommended: Latest LTS version
System Memory
Minimum: 4GB RAM
Recommended: 8GB RAM or more
Storage
Minimum: 1GB free space
Recommended: 5GB+ for larger documentation projects
Software Dependencies
Required
Git (latest version recommended)
npm or yarn package manager
Modern web browser (Chrome, Firefox, Safari, Edge)
Optional
Docker (for containerized deployment)
PostgreSQL (for enterprise features)
Development Environment
Supported Operating Systems
macOS (10.15 or later)
Windows 10/11
Linux (Ubuntu 20.04 or later recommended)
IDE/Editor Support
VS Code (recommended)
WebStorm
Any text editor with Markdown support
Network Requirements
Cloud Features
Stable internet connection
Access to npm registry
Access to GitHub (for version control)
Enterprise Features
Outbound HTTPS (443) access
WebSocket support
Custom domain (optional)
Browser Support
Desktop Browsers
Chrome (last 2 versions)
Firefox (last 2 versions)
Safari (last 2 versions)
Edge (last 2 versions)
Mobile Browsers
iOS Safari
Android Chrome
Verification
Run the following command to check if your environment is ready:
-------------
[Document: docs/getting-started/quickstart.json]
Title: Quickstart Guide
Quick Start Guide
Get up and running with AkiraDocs in minutes.
Quick Deploy
Option 1: Deploy with Vercel
The fastest way to get started is using Vercel:

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2FCloud-Code-AI%2Fakiradocs-template)
Option 2: Using CLI
Create a new project using our CLI:
Code example:
npx create-akiradocs@latest my-docs
Basic Setup Steps
1. **Clone the Repository** (if not using Quick Deploy)
Code example:
git clone https://github.com/your-org/akira-docs-template
cd akira-docs-template
2. **Install Dependencies**
Code example:
npm install
# or
yarn install
3. **Start Development Server**
Code example:
npm run dev
# or
yarn dev
4. Open `http://localhost:3000` in your browser
Initial Configuration
1. **Update Site Configuration**
Edit `akiradocs.config.json`:
Code example:
{
  "site": {
    "title": "Your Docs",
    "description": "Your documentation description"
  }
}
2. **Configure Translation** (Optional)
Code example:
{
  "translation": {
    "auto_translate": true,
    "provider": "anthropic",
    "targetLanguages": ["es", "fr", "de"]
  }
}
-------------
[Document: docs/getting-started/features.json]
AkiraDocs Features
A comprehensive overview of AkiraDocs' core features and capabilities.
Content Creation & Management
**Notion-like Editor**: Intuitive block-based interface with real-time preview
**Markdown Support**: Native Markdown and MDX compatibility
**Custom Components**: Create and reuse your own content blocks
Internationalization & Translation
**Multi-Language Support**: Maintain documentation in multiple languages
**AI-Powered Translation**: Automated, context-aware content translation
**Translation Management**: Built-in tools for managing localized content
Search & Discovery
**AI-Powered Search**: Natural language question answering with context awareness
**SEO Optimization**: Automated SEO tools and optimizations
**Smart Indexing**: Real-time search index updates
Build & Performance
**Static Generation**: Optimized build process with asset optimization
**Developer Experience**: Fast refresh and comprehensive debugging tools
**Performance Focus**: Built-in best practices for speed and efficiency
Enterprise Features (Coming Soon)
**Security & Compliance**: SSO, RBAC, and audit logging
**Analytics & Insights**: Usage tracking and documentation metrics
**Team Collaboration**: Enterprise-grade collaboration tools
Migration Support (Coming Soon)
Code example:
# Supported platforms for easy migration
✓ Nextra
✓ GitBook
✓ Docusaurus
✓ ReadTheDocs
Feature Comparison
| Feature | AkiraDocs | Traditional Docs |
|---------|-----------|------------------|
| Notion-like Editor | ✓ | ✗ |
| AI Translation | ✓ | ✗ |
| AI Search | ✓ | ✗ |
| Auto SEO | ✓ | Partial |
| Markdown Support | ✓ | ✓ |
| Build Optimization | ✓ | Varies |
-------------
[Document: docs/editor/overview.json]
Editor Overview
AkiraDocs features a modern, Notion-like editor that combines the simplicity of block-based editing with the power of Markdown.
Editor Interface
Main Components
**Toolbar**: Quick access to formatting options and block types
**Content Area**: Block-based editing space
**Sidebar**: Navigation and document structure
**Command Palette**: Quick commands (Ctrl/Cmd + P)
Block Structure
Each content element is a block that can be:
Dragged and dropped to reorganize
Converted between different types
Duplicated or deleted
Nested within other blocks
Getting Started
Creating Content
1. Click the '+' button or press '/' to add a new block
2. Choose block type from the popup menu
3. Start typing or add content
Basic Operations
Code example:
/ → Open block menu
⌘/Ctrl + P → Command palette
⌘/Ctrl + / → Show keyboard shortcuts
↑↓ → Navigate between blocks
Block Types
Text Blocks
Paragraphs
Headings (H1-H6)
Lists (Bulleted, Numbered)
Quotes
Callouts
Rich Media
Images
Videos
Embeds
Files
Code blocks
Special Blocks
Tables (Coming Soon)
Dividers
Custom components (Coming Soon)
-------------
[Document: docs/editor/features.json]
Editor Features
Detailed overview of AkiraDocs editor capabilities and features.
Block System
Text Formatting
**Basic Formatting**
Bold, italic, underline
Strikethrough
Highlight
Code inline
**Advanced Formatting**
Custom colors
Multiple fonts
Text alignment
Indentation
Content Blocks
Rich Text
Code example:
# Heading 1
## Heading 2
> Blockquote
- Bullet list
1. Numbered list
Code Blocks
Code example:
// Syntax highlighting
console.log('Hello World');
Media Blocks
Image upload and embedding
Video embedding
File attachments
Interactive embeds
AI Features
Content Enhancement
Grammar and style suggestions
Content optimization
SEO recommendations
Translation assistance
Smart Formatting
Auto-formatting
Smart lists
Table formatting
Code block language detection
Collaboration Features
Version Control
Git integration
Change history
Rollback capabilities
-------------
[Document: docs/contributing/how-to-contribute.json]
Contributing to AkiraDocs
Guide to contributing to the AkiraDocs open-source project.
Getting Started
Setup Development Environment
Code example:
# Clone repository
git clone https://github.com/akiradocs/akiradocs
cd akiradocs

# Install dependencies
npm install

# Start development server
npm run dev
Contribution Guidelines
Types of Contributions
Bug fixes
Feature additions
Documentation improvements
Translation help
Issue reporting
Pull Request Process
1. Fork the repository
2. Create feature branch
3. Make changes
4. Submit pull request
Commit Messages
Code example:
# Format
type(scope): description

# Examples
feat(editor): add new block type
fix(translation): correct language detection
docs(api): update authentication guide
Development Guidelines
Code Style
Follow existing patterns
Use TypeScript
Add comments
Write tests
Testing
Code example:
# Run tests
npm run test

# Check types
npm run type-check

# Lint code
npm run lint
Documentation
Update Docs
1. Edit relevant files
2. Update examples
3. Check links
4. Verify formatting
Create Examples
Clear and concise
Well-documented
Tested
Maintainable
Getting Help
Join [Discord](https://discord.gg/zvYZukgeH2)
Check [Issues](https://github.com/Cloud-Code-AI/akiradocs/issues)
Read [Documentation](https://docs.akiradocs.com)
-------------
[Document: docs/contributing/code-of-conduct.json]
Code of Conduct
Our Pledge
We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.
Our Standards
Examples of behavior that contributes to a positive environment:

* Demonstrating empathy and kindness toward other people
* Being respectful of differing opinions, viewpoints, and experiences
* Giving and gracefully accepting constructive feedback
* Accepting responsibility and apologizing to those affected by our mistakes
* Focusing on what is best for the overall community

Examples of unacceptable behavior:

* The use of sexualized language or imagery, and sexual attention or advances
* Trolling, insulting or derogatory comments, and personal or political attacks
* Public or private harassment
* Publishing others' private information without explicit permission
* Other conduct which could reasonably be considered inappropriate in a professional setting
Enforcement Responsibilities
Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.
Enforcement
Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement. All complaints will be reviewed and investigated promptly and fairly.
Attribution
This Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org), version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.
-------------
[Document: docs/content-management/creating-pages.json]
Creating and Organizing Pages
Learn how to create, structure, and organize your documentation pages in AkiraDocs. You can create markdown pages or just use the editor UI. Note in _contents folder, you will only see markdown content created by you. If you use Editor UI, the content will be saved in the compiled folder and will be automatically translated to other languages.
Page Structure
Basic Page Template
Code example:
---
title: Your Page Title
description: Brief description of the page
author: Your Name
publishDate: 2024-11-26
modifiedDate: 2024-11-26
category: Category Name
keywords:
  - keyword1
  - keyword2
---

# Main Title

Content starts here...
Directory Structure
Code example:
folder_name/
├── _contents/
│   ├── en/
│   │   ├── getting-started/
│   │   ├── guides/
│   │   └── api/
You can just create pages for default language (en) and AkiraDocs will automatically translate them to other languages.
Creating New Pages
Method 1: Using the UI
1. Click "New Page" in the sidebar
2. Start adding content
Method 2: Direct File Creation
1. Create a new `.md` file in the appropriate directory
2. Add required frontmatter
3. Write content using Markdown
4. Save and compile
Page Organization
Categories and Tags
Use consistent categories
Apply relevant tags
Organize by topic
Create logical hierarchies
Navigation Structure
This is automatically generated from the folder structure. You can customize it by editing the `_meta.json` file inside compiled folder.
Code example:
{
  "docs": {
    "getting-started": {
      "title": "Getting Started",
      "items": {
        "introduction": {
          "title": "Introduction",
          "path": "/docs/getting-started/introduction"
        }
      }
    }
  }
}
-------------
[Document: docs/api-reference/usage-guide.json]
API Documentation Guide
Learn how to generate comprehensive API documentation using AkiraDocs.
Quick Start
Upload API Spec
1. Place your OpenAPI/Swagger spec in:
Code example:
_contents/{language_code}/api/apiSpec.json
2. AkiraDocs automatically generates documentation.
Example API Spec
Code example:
{
  "openapi": "3.0.0",
  "info": {
    "title": "Sample API",
    "version": "1.0.0"
  },
  "paths": {
    "/users": {
      "get": {
        "summary": "Get users",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  }
}
Generated Documentation
Automatic Features
Interactive API explorer
Code samples in multiple languages
Request/response examples
Authentication documentation
Example Output
Code example:
// Example: Get Users
const response = await fetch('https://api.example.com/users', {
  method: 'GET',
  headers: {
    'Authorization': 'Bearer YOUR_TOKEN'
  }
});

const users = await response.json();
Customization
Theme Options
Code example:
{
  "api": {
    "docs": {
      "theme": "dark",
      "syntaxHighlight": true,
      "showExamples": true
    }
  }
}
Language Selection
Code example:
{
  "api": {
    "examples": {
      "languages": ["javascript", "python", "curl"]
    }
  }
}
-------------