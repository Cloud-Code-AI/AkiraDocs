[Document: docs/introduction.json]
Learn about Akira Docs and its core features

Akira Docs is a modern documentation platform that combines the power of AI with an intuitive block-based content system. This guide will help you understand the core concepts and features.
Key Features
AI-powered search
Block-based content editing
Responsive design
Customizable themes
Markdown support
-------------
[Document: articles/welcome.json]
Welcome to Akira Docs, the next-generation documentation platform powered by AI. This template will help you get started with creating your own documentation.
Easy to customize\nAI-powered search\nBlock-based content system\nResponsive design
-------------
[Document: articles/test_blog_post.json]
Title: Test Blog Post
A test blog post to demonstrate all block types.
Example Heading Sample1
This paragraph is part of the test blog post. It demonstrates the paragraph block.
Code example:
console.log('Testing all blocks');
Item 1
Item 2
Item 3
Important: This is an important callout message.
-------------
[Document: articles/template.json]
Title: Test Blog Post
A test blog post to demonstrate all block types.
Example Heading Sample1
This paragraph is part of the test blog post. It demonstrates the paragraph block.
Code example:
console.log('Testing all blocks');
Item 1
Item 2
Item 3
Important: This is an important callout message.
-------------
[Document: articles/ai_integration.json]
AI Assistant Integration 
Learn how to use Akira's built-in AI assistant for documentation enhancement

Akira's AI Assistant is a powerful tool that helps developers and technical writers create, maintain, and improve documentation through natural language interactions. This guide covers the essential features and best practices for utilizing the AI assistant effectively.
Key Features
Natural language documentation generation
Code example suggestions
Content summarization
Grammar and style improvements
Multi-language support
Getting Started
The AI Assistant can be accessed through the command palette (Ctrl+Shift+P) or by using the `/ai` command in any content block. It understands context-aware requests and can help with various documentation tasks.
Common Use Cases
1. Generating code examples
2. Explaining technical concepts
3. Restructuring content
4. Creating documentation outlines
5. Translating documentation
Best Practices
Provide clear context when making requests
Review and validate AI-generated content
Use AI suggestions as a starting point
Combine AI assistance with human expertise
Keep documentation style consistent
Configuration Options
You can customize the AI Assistant's behavior through the `config.yaml` file:
Code example:
ai_assistant:
  model: "advanced-docs-v2"
  temperature: 0.7
  max_tokens: 2048
  style_guide: "path/to/style/guide.md"
Next Steps
Explore our [Advanced AI Features](/advanced-ai-features) guide to learn more about specialized use cases and integration possibilities.
-------------
[Document: docs/getting-started/quickstart.json]
Title: Quickstart Guide
Get up and running with Akira Docs in minutes

Follow these steps to start using Akira Docs for your documentation needs.
Code example:
bash
git clone https://github.com/your-org/akira-docs-template
cd akira-docs-template
npm install
npm run dev
Prerequisites: Make sure you have Node.js 16 or higher installed on your system.
-------------
[Document: docs/getting-started/configuration.json]
Configuration Guide
Akira uses a akiradocs.config.json file for site-wide configuration. This guide explains all available options and their usage.
Code example:
{
  "title": "Akira Docs",
  "description": "Next-gen documentation powered by AI",
  "header": {
    "logo": {
      "path": "/akiradocs_logo.svg",
      "width": 120,
      "height": 30,
      "show": true
    },
    "favicon": {
      "path": "/akira_favicon.png",
      "show": true
    },
    "title": {
      "text": "Akira Docs",
      "show": false
    },
    "searchPlaceholder": "Search Akira...",
    "navItems": [
      { "label": "AI Search", "href": "/aiSearch", "icon": "/sparkles.svg", "show": false },
      { "label": "Docs", "href": "/en/docs", "icon": "/legacy.svg", "show": true },
      { "label": "Articles", "href": "/en/articles", "icon": "/articles.svg", "show": true }
    ]
  },
  "footer": {
    "companyName": "Cloud Code AI",
    "socialLinks": [
      { "name": "GitHub", "url": "https://github.com/Cloud-Code-AI/akiradocs-template", "icon": "/github.svg" },
      { "name": "Twitter", "url": "https://x.com/CloudCodeAI", "icon": "/twitter.svg" },
      { "name": "LinkedIn", "url": "https://www.linkedin.com/company/cloudcode-ai", "icon": "/linkedin.svg" }
    ]
  },
  "languages": {
    "defaultLocale": "en",
    "locales": [
      { "code": "en", "name": "English", "flag": "ðŸ‡ºðŸ‡¸" },
      { "code": "es", "name": "EspaÃ±ol", "flag": "ðŸ‡ªðŸ‡¸" },
      { "code": "fr", "name": "FranÃ§ais", "flag": "ðŸ‡«ðŸ‡·" }
    ],
    "fallbackLocale": "en"
  }
}
-------------
[Document: docs/features/themes.json]
Title: Theming
Customize the look and feel of your Akira documentation
Theming Guide
Akira provides powerful theming capabilities to customize your documentation's appearance. You can use pre-built themes or create your own.
Code example:
// theme.config.js
module.exports = {
  colors: {
    primary: '#0066cc',
    secondary: '#4c9aff',
    background: '#ffffff'
  },
  typography: {
    fontFamily: 'Inter, sans-serif',
    baseSize: '16px'
  }
}
-------------
[Document: docs/features/blocks.json]
Title: Content Blocks
Understanding and using Akira's content block system
Content Blocks
Content blocks are the fundamental building units of Akira documentation. They provide a flexible way to structure and present information.
Available Block Types
Text blocks
Code blocks
Image blocks
Callout blocks
Table blocks
Custom blocks
-------------